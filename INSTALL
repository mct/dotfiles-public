#!/usr/bin/perl
# vim:set ai sw=4 ts=4 et:

# This is extremely convoluted.  It started out as a shell script, but
# because I wanted to make the symlinks pretty (e.g., by removing the common
# prefix of a home directory if this repository is checked out under the home
# directory somewhere), it got complicated, and ugly.

use File::Basename;
use Cwd 'abs_path';
use Data::Dumper;

use strict;
use warnings;

my $home = glob("~/");  # $ENV{HOME}
my $mydir = abs_path(dirname $0) . "/";
my $backupdir = "$mydir/backup";

# Remove the common prefix of $home from $dir.  This is tricky, and relies on
# abs_path() above working.  It may very well have bugs.  Common prefix code
# from <http://www.perlmonks.org/bare/?node_id=481028>.  The xor trick and
# then counting the number of leading NULs is both inspiring and revolting.
($home ^ $mydir) =~ /^\0*/;
my $linktarget = substr $mydir, $+[0];
$linktarget =~ s/\/$//;

my @files = sort
            grep { $_ ne ".git" }
            grep { $_ ne ".gitignore" }
            grep { ! m/\.sw[a-z]$/ }    # vim swap files
            grep { ! m/^\.oui-/ }
            map { basename $_ } glob("$mydir/.??*");

-d $backupdir and die "$backupdir must be removed before continuing\n";
mkdir $backupdir or die "mkdir: $backupdir: $!";

chdir $home or die;

for my $i (@files) {
    if (-e $i) {
        rename $i, "$backupdir/$i" or die "rename: $i: $!";
    }
    symlink "$linktarget/$i", $i or die "symlink: $i: $!";
}
